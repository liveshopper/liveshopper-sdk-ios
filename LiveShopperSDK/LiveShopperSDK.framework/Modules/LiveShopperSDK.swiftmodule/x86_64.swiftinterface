// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LiveShopperSDK
import AVFoundation
import CommonCrypto
import CoreLocation
import CoreMotion
import Foundation
@_exported import LiveShopperSDK
import MobileCoreServices
import Swift
import UIKit
import os
public struct LSQuestion : Swift.Codable {
  public let key: Swift.String?
  public let created: Swift.Int?
  public let modified: Swift.Int?
  public let owners: LiveShopperSDK.LSOwners?
  public let version: Swift.Int?
  public let allowDecimals: Swift.Bool
  public let answerOrder: Swift.String
  public let answers: [LiveShopperSDK.LSAnswer]
  public let clientReference: Swift.String?
  public let criticalAnswers: [Swift.String]
  public let hasOther: Swift.Bool?
  public let highValueLabel: Swift.String?
  public let images: [Swift.String]
  public let isOptional: Swift.Bool?
  public let lastAnswerPositionPinned: Swift.Bool?
  public let lowValueLabel: Swift.String?
  public let maxMultipleAnswers: Swift.Int?
  public let maxScore: Swift.Int?
  public let maxValue: Swift.Int?
  public let minMultipleAnswers: Swift.Int?
  public let minValue: Swift.Int?
  public let mustPickSuggestion: Swift.Bool?
  public let numStars: Swift.Int?
  public let openTextPlaceholder: Swift.String?
  public let openTextSuggestions: [Swift.String]
  public let order: Swift.Int?
  public let parentKey: Swift.String?
  public let photoCaptureOptions: LiveShopperSDK.LSPhotoCaptureOptions?
  public let pointers: LiveShopperSDK.LSKeyedListPointer?
  public let question: Swift.String
  public let responseCount: LiveShopperSDK.LSTaskResponseCount?
  public let scoreIntervals: [LiveShopperSDK.LSScoreInterval]
  public let sentimentText: Swift.String?
  public let showUnitsOnLeft: Swift.Bool
  public let singleLineResponse: Swift.Bool?
  public let thresholdAnswers: [Swift.String]
  public let type: LiveShopperSDK.LSQuestionType
  public let unitOfMeasurementLabel: Swift.String?
  public let videoId: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol BarcodeScannerViewControllerType : AnyObject {
  var delegate: LiveShopperSDK.BarcodeScannerDelegate? { get set }
}
@objc public enum LSEventType : Swift.Int {
  case unknown
  case userEnteredGeofence
  case userStartedTraveling
  case userStoppedTraveling
  case userExitedGeofence
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol BarcodeScannerDelegate : AnyObject {
  func scanningDidFail()
  func scanningDidStop()
  func scanningSucceeded(code: Swift.String?)
}
public struct LSRewardMessage : Swift.Codable {
  public let header: Swift.String?
  public let body: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct LSTask : Swift.Codable, Swift.Hashable {
  public let key: Swift.String?
  public let created: Swift.Int?
  public let modified: Swift.Int?
  public let owners: LiveShopperSDK.LSOwners?
  public let version: Swift.Int?
  public let associatesOnly: Swift.Bool
  public let claimDistanceOverride: Swift.Double?
  public let description: Swift.String?
  public let distance: Swift.Double
  public let due: Swift.Int?
  public let id: Swift.Int
  public let location: LiveShopperSDK.LSPlace
  public let locationKey: Swift.String
  public let logo: Swift.String?
  public let nextQuestion: Swift.String?
  public let questions: [LiveShopperSDK.LSQuestion]
  public let rewards: [LiveShopperSDK.LSReward]
  public let taskRequirements: [Swift.String]
  public let time: LiveShopperSDK.LSEstimatedTime?
  public let title: Swift.String?
  public var state: LiveShopperSDK.LSTask.State
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public func distance(metric: Swift.Bool = false) -> Swift.String
  public static func == (lhs: LiveShopperSDK.LSTask, rhs: LiveShopperSDK.LSTask) -> Swift.Bool
  public struct State : Swift.Hashable {
    public static let cancelled: LiveShopperSDK.LSTask.State
    public static let completed: LiveShopperSDK.LSTask.State
    public static let error: LiveShopperSDK.LSTask.State
    public static let generated: LiveShopperSDK.LSTask.State
    public static let rejected: LiveShopperSDK.LSTask.State
    public static let running: LiveShopperSDK.LSTask.State
    public static let unknown: LiveShopperSDK.LSTask.State
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: LiveShopperSDK.LSTask.State, b: LiveShopperSDK.LSTask.State) -> Swift.Bool
  }
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum LSTrackingPriority : Swift.Int {
  case efficiency
  case responsiveness
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct LSPlace : Swift.Codable, Swift.Equatable {
  public let key: Swift.String?
  public let owners: LiveShopperSDK.LSOwners?
  public let clientKey: Swift.String?
  public let clientReference: Swift.String?
  public let country: Swift.String?
  public let emails: [Swift.String]?
  public let logoKey: Swift.String?
  public let phoneNumber: Swift.String?
  public let structure: [Swift.String]?
  public let active: Swift.Bool?
  public let address1: Swift.String
  public let address2: Swift.String?
  public let city: Swift.String
  public let latitude: Swift.Double
  public let longitude: Swift.Double
  public let name: Swift.String
  public let state: Swift.String
  public let zipCode: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: LiveShopperSDK.LSPlace, rhs: LiveShopperSDK.LSPlace) -> Swift.Bool
}
public struct LSTaskResponse : Swift.Codable {
  public let key: Swift.String?
  public let created: Swift.Int?
  public let modified: Swift.Int?
  public let owners: LiveShopperSDK.LSOwners?
  public let version: Swift.Int?
  public let answers: [Swift.String]?
  public let base64: Swift.String?
  public let nextKey: Swift.String?
  public let photoUrl: Swift.String?
  public let question: LiveShopperSDK.LSQuestion?
  public let score: Swift.Int?
  public let state: LiveShopperSDK.LSTaskResponse.State
  public let taskKey: Swift.String
  public let userAnswer: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension LSTaskResponse {
  public struct State : Swift.Hashable {
    public static let `continue`: LiveShopperSDK.LSTaskResponse.State
    public static let completed: LiveShopperSDK.LSTaskResponse.State
    public static let error: LiveShopperSDK.LSTaskResponse.State
    public static let invalid: LiveShopperSDK.LSTaskResponse.State
    public static let unknownState: LiveShopperSDK.LSTaskResponse.State
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: LiveShopperSDK.LSTaskResponse.State, b: LiveShopperSDK.LSTaskResponse.State) -> Swift.Bool
  }
}
@objc public enum LSEventVerification : Swift.Int {
  case accept
  case unverify
  case reject
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol LogWriter {
  func writeMessage(_ message: Swift.String, log: LiveShopperSDK.Loggable, logLevel: LiveShopperSDK.LogLevel)
  func writeMessage(_ message: LiveShopperSDK.LogMessage, log: LiveShopperSDK.Loggable, logLevel: LiveShopperSDK.LogLevel)
}
public protocol LogModifierWriter : LiveShopperSDK.LogWriter {
  var modifiers: [LiveShopperSDK.LogModifier] { get }
}
extension LogModifierWriter {
  public func modifyMessage(_ message: Swift.String, log: LiveShopperSDK.Loggable, logLevel: LiveShopperSDK.LogLevel) -> Swift.String
}
open class ConsoleWriter : LiveShopperSDK.LogModifierWriter {
  public enum Method {
    case print, nslog
    public static func == (a: LiveShopperSDK.ConsoleWriter.Method, b: LiveShopperSDK.ConsoleWriter.Method) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public let modifiers: [LiveShopperSDK.LogModifier]
  public init(method: LiveShopperSDK.ConsoleWriter.Method = .print, modifiers: [LiveShopperSDK.LogModifier] = [])
  open func writeMessage(_ message: Swift.String, log: LiveShopperSDK.Loggable, logLevel: LiveShopperSDK.LogLevel)
  open func writeMessage(_ message: LiveShopperSDK.LogMessage, log: LiveShopperSDK.Loggable, logLevel: LiveShopperSDK.LogLevel)
  @objc deinit
}
open class OSLogWriter : LiveShopperSDK.LogModifierWriter {
  final public let modifiers: [LiveShopperSDK.LogModifier]
  public init(modifiers: [LiveShopperSDK.LogModifier] = [])
  open func writeMessage(_ message: Swift.String, log: LiveShopperSDK.Loggable, logLevel: LiveShopperSDK.LogLevel)
  open func writeMessage(_ message: LiveShopperSDK.LogMessage, log: LiveShopperSDK.Loggable, logLevel: LiveShopperSDK.LogLevel)
  open func logType(forLogLevel logLevel: LiveShopperSDK.LogLevel) -> os.OSLogType
  @objc deinit
}
public protocol LiveShopperSDK : AnyObject {
  static var Places: LiveShopperSDK.PlacesProtocol.Type { get }
  static var Rewards: LiveShopperSDK.RewardsProtocol.Type { get }
  static var Tasks: LiveShopperSDK.TasksProtocol.Type { get }
  static func createBarcodeScanner() -> (UIKit.UIViewController & LiveShopperSDK.BarcodeScannerViewControllerType)
  static func createImagePicker(question: LiveShopperSDK.LSQuestion) -> UIKit.UIImagePickerController?
  static func initialize(publishableKey: Swift.String)
  static func isAuthenticated() -> Swift.Bool
  static func isTracking() -> Swift.Bool
  static func setDelegate(_ delegate: LiveShopperSDK.LSDelegate)
  static func setDescription(_ description: Swift.String?)
  static func setMetadata(_ metadata: [Swift.AnyHashable : Any]?)
  static func setUserId(_ userId: Swift.String)
  static func startTracking(trackingOptions: LiveShopperSDK.LSTrackingOptions?)
  static func stopTracking()
}
public protocol PlacesProtocol {
  static func get(searchTerm: Swift.String, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<[LiveShopperSDK.LSPlace]>) -> Swift.Void)
  static func get(latitude: Swift.Double, longitude: Swift.Double, radius: Swift.Double, minimumRadius: Swift.Double, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<[LiveShopperSDK.LSPlace]>) -> Swift.Void)
}
public protocol RewardsProtocol {
  static func claim(task: LiveShopperSDK.LSTask, reward: LiveShopperSDK.LSReward, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<Swift.Void>) -> Swift.Void)
}
public protocol TasksProtocol {
  static func claim(task: LiveShopperSDK.LSTask, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<LiveShopperSDK.LSTask>) -> Swift.Void)
  static func get(latitude: Swift.Double, longitude: Swift.Double, radius: Swift.Double, minimumRadius: Swift.Double, completion: ((LiveShopperSDK.LiveShopper.ApiResult<[LiveShopperSDK.LSTask]>) -> Swift.Void)?)
  static func get(locationID: Swift.String, minimumRadius: Swift.Double?, campaignID: Swift.String?, completion: ((LiveShopperSDK.LiveShopper.ApiResult<[LiveShopperSDK.LSTask]>) -> Swift.Void)?)
  static func getRequirements(task: LiveShopperSDK.LSTask) -> [Swift.String]
  static func nextQuestion(task: LiveShopperSDK.LSTask, key: Swift.String) -> LiveShopperSDK.LSQuestion?
  static func saveResponse(task: LiveShopperSDK.LSTask, question: LiveShopperSDK.LSQuestion, answers: [Swift.String]?, userAnswer: Swift.String?, image: UIKit.UIImage?, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<LiveShopperSDK.LSTaskResponse>) -> Swift.Void)
}
@objc public enum LSEventConfidence : Swift.Int {
  case none
  case low
  case medium
  case high
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum LiveShopperError : Swift.Error {
  case authenticationFailed
  case imageEncodeError
  case internalError
  case locationNotFound
  case missingClientKey
  case missingTaskKey
  case missingUserKey
  case networkError(message: Swift.String)
  case nonExistentUser
  case notLoggedIn
  case questionSubmitError(submitError: LiveShopperSDK.LiveShopper.SubmitError)
  case sessionExpired
  case taskNotCompleted
  case taskOutOfRange
  public var message: Swift.String {
    get
  }
}
public struct LSPhotoCaptureOptions : Swift.Codable {
  public let allowFlashToggle: Swift.Bool
  public let defaultFlashState: Swift.Bool
  public let exampleImage: Swift.String
  public let googleVisionOptionKey: Swift.String
  public let mustProvidePhoto: Swift.Bool
  public let photoLevelType: LiveShopperSDK.LSPhotoCaptureOptions.LSLevelType
  public let photoOverlayType: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption
  public let photoPromptText: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension LSPhotoCaptureOptions {
  public struct LSLevelType : Swift.Hashable {
    public static let flat: LiveShopperSDK.LSPhotoCaptureOptions.LSLevelType
    public static let none: LiveShopperSDK.LSPhotoCaptureOptions.LSLevelType
    public static let vertical: LiveShopperSDK.LSPhotoCaptureOptions.LSLevelType
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: LiveShopperSDK.LSPhotoCaptureOptions.LSLevelType, b: LiveShopperSDK.LSPhotoCaptureOptions.LSLevelType) -> Swift.Bool
  }
  public struct LSOverlayOption : Swift.Hashable {
    public static let circle: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption
    public static let circle_square: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption
    public static let none: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption
    public static let rectangle_horizontal: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption
    public static let rectangle_vertical: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption
    public static let square: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption, b: LiveShopperSDK.LSPhotoCaptureOptions.LSOverlayOption) -> Swift.Bool
  }
}
public class AuthService {
  public var authenticated: Swift.Bool {
    get
  }
  @objc deinit
}
public struct LSReward : Swift.Codable {
  public let key: Swift.String?
  public let created: Swift.Int?
  public let modified: Swift.Int?
  public let owners: LiveShopperSDK.LSOwners?
  public let version: Swift.Int?
  public let activationDelay: Swift.Int?
  public let activationExpiration: Swift.Int?
  public let activationExpiryPeriodType: Swift.Int?
  public let barcode: LiveShopperSDK.LSRewardBarcode?
  public let campaignRewardKey: Swift.String?
  public let claimCount: Swift.Int?
  public let clientName: Swift.String?
  public let clientReference: Swift.String?
  public let daysToEmpty: Swift.Int?
  public let isRandomDraw: Swift.Bool?
  public let legalese: Swift.String?
  public let logo: Swift.String?
  public let maxClaimCount: Swift.Int?
  public let message: LiveShopperSDK.LSRewardMessage?
  public let parentKey: Swift.String?
  public let randomDrawLoseMessage: Swift.String?
  public let randomDrawRatio: Swift.Double?
  public let redemptionExpiration: Swift.Int?
  public let shareText: Swift.String?
  public let state: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct LSTaskResponseCount : Swift.Codable {
  public let actual: Swift.Int
  public let wanted: Swift.Int
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class LSInsightLocation : ObjectiveC.NSObject {
  public var confidence: LiveShopperSDK.LSInsightLocationConfidence
  public var country: LiveShopperSDK.LSRegion?
  public var dma: LiveShopperSDK.LSRegion?
  public var location: CoreLocation.CLLocation
  public var postalCode: LiveShopperSDK.LSRegion?
  public var state: LiveShopperSDK.LSRegion?
  public var type: LiveShopperSDK.LSInsightLocationType
  public var updatedAt: Foundation.Date
  @objc override dynamic public init()
  @objc deinit
}
public protocol LogModifier {
  func modifyMessage(_ message: Swift.String, log: LiveShopperSDK.Loggable, with logLevel: LiveShopperSDK.LogLevel) -> Swift.String
}
open class TimestampModifier : LiveShopperSDK.LogModifier {
  public init()
  open func modifyMessage(_ message: Swift.String, log: LiveShopperSDK.Loggable, with _: LiveShopperSDK.LogLevel) -> Swift.String
  @objc deinit
}
public struct LSAnswer : Swift.Codable {
  public let key: Swift.String?
  public let created: Swift.Int?
  public let modified: Swift.Int?
  public let owners: LiveShopperSDK.LSOwners?
  public let version: Swift.Int?
  public let answerOrder: Swift.Int
  public let clientReference: Swift.String
  public let displayText: Swift.String
  public let displayTextKey: Swift.String
  public let nextQuestionKey: Swift.String
  public let photoCaptureOptions: LiveShopperSDK.LSPhotoCaptureOptions?
  public let questionKey: Swift.String
  public let score: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public enum LSStatus : Swift.Int {
  case success
  case errorLocation
  case errorNetwork
  case errorPermissions
  case errorPublishableKey
  case errorRateLimit
  case errorServer
  case errorUnauthorized
  case errorUnknown
  case errorUnrecognized
  case errorUnsupported
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class LSEvent : ObjectiveC.NSObject {
  public var actualCreatedAt: Foundation.Date
  public var confidence: LiveShopperSDK.LSEventConfidence
  public var createdAt: Foundation.Date
  public var duration: Swift.Float
  public var geofence: LiveShopperSDK.LSGeofence?
  public var live: Swift.Bool
  public var location: CoreLocation.CLLocation
  public var region: CoreLocation.CLRegion?
  public var tasks: [LiveShopperSDK.LSTask]?
  public var type: LiveShopperSDK.LSEventType
  public var verification: LiveShopperSDK.LSEventVerification
  @objc override dynamic public init()
  @objc deinit
}
extension LiveShopper {
  public enum ApiResult<T> {
    case failure(LiveShopperSDK.LiveShopperError)
    case success(T)
  }
  public enum LSLoginState : Swift.Equatable {
    case loggedIn(needsRefresh: Swift.Bool)
    case loggedOut
    public static func == (a: LiveShopperSDK.LiveShopper.LSLoginState, b: LiveShopperSDK.LiveShopper.LSLoginState) -> Swift.Bool
  }
  public enum SubmitError {
    case answerCountOutOfRange(Swift.Int, Swift.Int)
    case charactersOutOfRange(Swift.Int, Swift.Int)
    case invalidNumberFormat
    case invalidValue
    case missingBarcode
    case missingDate
    case missingPhoto
    case missingRating
    case missingTime
    case numberOutOfRange(Swift.Int, Swift.Int)
    case unknown
    public var message: Swift.String {
      get
    }
  }
}
@objc public protocol LSDelegate : AnyObject {
  @objc func didReceiveEvents(_ events: [LiveShopperSDK.LSEvent], user: LiveShopperSDK.LSUser)
  @objc func didUpdateLocation(_ location: CoreLocation.CLLocation, user: LiveShopperSDK.LSUser)
  @objc func didFailWithStatus(status: LiveShopperSDK.LSStatus)
  @objc optional func didUpdateClientLocation(_ location: CoreLocation.CLLocation, stopped: Swift.Bool)
}
extension LiveShopper {
  public struct GeofenceNotificationUserInfoKey {
    public static let CampaignID: Swift.String
    public static let LocationID: Swift.String
  }
}
public protocol LogMessage {
  var attributes: [Swift.String : Any] { get }
  var name: Swift.String { get }
}
public struct LSQuestionType : Swift.Hashable {
  public static let barcodeScan: LiveShopperSDK.LSQuestionType
  public static let date: LiveShopperSDK.LSQuestionType
  public static let multipleAnswers: LiveShopperSDK.LSQuestionType
  public static let numericOpenEnded: LiveShopperSDK.LSQuestionType
  public static let openEnded: LiveShopperSDK.LSQuestionType
  public static let ratingScale: LiveShopperSDK.LSQuestionType
  public static let ratingScaleWithText: LiveShopperSDK.LSQuestionType
  public static let singleAnswer: LiveShopperSDK.LSQuestionType
  public static let time: LiveShopperSDK.LSQuestionType
  public static let undefined: LiveShopperSDK.LSQuestionType
  public let rawValue: Swift.String
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: LiveShopperSDK.LSQuestionType, b: LiveShopperSDK.LSQuestionType) -> Swift.Bool
}
public struct LogLevel : Swift.OptionSet, Swift.Equatable, Swift.Hashable {
  public let rawValue: LiveShopperSDK.LogLevel.RawValue
  public static let off: LiveShopperSDK.LogLevel
  public static let debug: LiveShopperSDK.LogLevel
  public static let info: LiveShopperSDK.LogLevel
  public static let event: LiveShopperSDK.LogLevel
  public static let warn: LiveShopperSDK.LogLevel
  public static let error: LiveShopperSDK.LogLevel
  public static let all: LiveShopperSDK.LogLevel
  public init(rawValue: LiveShopperSDK.LogLevel.RawValue)
  public typealias Element = LiveShopperSDK.LogLevel
  public typealias ArrayLiteralElement = LiveShopperSDK.LogLevel
}
extension LogLevel {
  public typealias RawValue = Swift.UInt
}
extension LogLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public class LSInsightState : ObjectiveC.NSObject {
  public var home: Swift.Bool {
    get
    }
  public var office: Swift.Bool {
    get
    }
  public var traveling: Swift.Bool {
    get
    }
  @objc override dynamic public init()
  @objc deinit
}
public struct LSOwners : Swift.Codable {
  public let campaign: Swift.String?
  public let client: Swift.String?
  public let user: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QuestionService {
  @objc deinit
}
public struct LSScoreInterval : Swift.Codable {
  public let lowerBound: Swift.Int?
  public let upperBound: Swift.Int?
  public let score: Swift.Int
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class PlaceService {
  public func get(latitude: Swift.Double, longitude: Swift.Double, radius: Swift.Double, minimumRadius: Swift.Double, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<[LiveShopperSDK.LSPlace]>) -> Swift.Void)
  public func get(searchTerm: Swift.String, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<[LiveShopperSDK.LSPlace]>) -> Swift.Void)
  @objc deinit
}
@objc public class LSGeofence : ObjectiveC.NSObject {
  public func setDescription(description: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class LSUser : ObjectiveC.NSObject {
  public var stopped: Swift.Bool {
    get
    }
  public var deviceId: Swift.String?
  public var metadata: [Swift.AnyHashable : Any]?
  public var userId: Swift.String?
  public var location: CoreLocation.CLLocation? {
    get
    set
  }
  public func setDescription(_ description: Swift.String?)
  @objc deinit
}
@objc public class LSRegion : ObjectiveC.NSObject {
  public var code: Swift.String
  public var name: Swift.String
  public var type: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class LSChain : ObjectiveC.NSObject {
  public var externalId: Swift.String?
  public var metadata: [Swift.AnyHashable : Any]?
  public var name: Swift.String
  public var slug: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public struct LSKeyedListPointer : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Loggable {
  var category: Swift.String { get set }
  var subsystem: Swift.String { get set }
}
@objc public enum LSTrackingSync : Swift.Int {
  case all
  case possibleStateChanges
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LSInsightLocationType : Swift.Int {
  case unknown
  case home
  case office
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct LSEstimatedTime : Swift.Codable {
  public let max: Swift.Int
  public let min: Swift.Int
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class DefaultSettings {
  public static var geofenceRadius: Swift.Double
  public static var imageScale: CoreGraphics.CGFloat
  public static var minimumSearchRadius: Swift.Double
  public static var movingThreshold: Swift.Double
  public static var searchRadius: Swift.Double
  public static var useMetric: Swift.Bool
  @objc deinit
}
@objc public class LSInsights : ObjectiveC.NSObject {
  public var homeLocation: LiveShopperSDK.LSInsightLocation?
  public var officeLocation: LiveShopperSDK.LSInsightLocation?
  public var state: LiveShopperSDK.LSInsightState
  @objc override dynamic public init()
  @objc deinit
}
public struct LSRewardBarcode : Swift.Codable {
  public let alternateText: Swift.String?
  public let instructions: Swift.String?
  public let isUnique: Swift.Bool?
  public let rewardKey: Swift.String?
  public let state: Swift.String?
  public let type: Swift.String?
  public let value: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public enum LSTrackingOffline : Swift.Int {
  case replayOff
  case replayStopped
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class LiveShopper {
  @objc deinit
}
extension LiveShopper : LiveShopperSDK.LiveShopperSDK {
  public static func initialize(publishableKey: Swift.String)
  public static func isAuthenticated() -> Swift.Bool
  public static func isTracking() -> Swift.Bool
  public static func setDelegate(_ delegate: LiveShopperSDK.LSDelegate)
  public static func setDescription(_ description: Swift.String?)
  public static func setMetadata(_ metadata: [Swift.AnyHashable : Any]?)
  public static func setUserId(_ userId: Swift.String)
  public static func startTracking(trackingOptions: LiveShopperSDK.LSTrackingOptions? = nil)
  public static func stopTracking()
}
extension LiveShopper {
  public static var Places: LiveShopperSDK.PlacesProtocol.Type
  public static var Rewards: LiveShopperSDK.RewardsProtocol.Type
  public static var Tasks: LiveShopperSDK.TasksProtocol.Type
}
extension LiveShopper {
  public static func createBarcodeScanner() -> (UIKit.UIViewController & LiveShopperSDK.BarcodeScannerViewControllerType)
  public static func createImagePicker(question: LiveShopperSDK.LSQuestion) -> UIKit.UIImagePickerController?
}
@objc public enum LSInsightLocationConfidence : Swift.Int {
  case none
  case low
  case medium
  case high
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class LSTrackingOptions : ObjectiveC.NSObject {
  @objc deinit
}
public struct SDKConstants {
  public static var API_URL: Swift.String {
    get
  }
  public static var AUTH_URL: Swift.String {
    get
  }
  public static var DEFAULT_CALLBACK: Swift.String
}
public class RewardService {
  public func claim(task: LiveShopperSDK.LSTask, reward _: LiveShopperSDK.LSReward, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<Swift.Void>) -> Swift.Void)
  @objc deinit
}
public class TaskService {
  public func claim(task: LiveShopperSDK.LSTask, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<LiveShopperSDK.LSTask>) -> Swift.Void)
  public func list(latitude: Swift.Double, longitude: Swift.Double, radius: Swift.Double, minimumRadius: Swift.Double, completion: ((LiveShopperSDK.LiveShopper.ApiResult<[LiveShopperSDK.LSTask]>) -> Swift.Void)? = nil)
  public func list(locationID: Swift.String, minimumRadius: Swift.Double? = nil, campaignID: Swift.String? = nil, completion: ((LiveShopperSDK.LiveShopper.ApiResult<[LiveShopperSDK.LSTask]>) -> Swift.Void)? = nil)
  public func getRequirements(task: LiveShopperSDK.LSTask) -> [Swift.String]
  public func submit(task: LiveShopperSDK.LSTask, question: LiveShopperSDK.LSQuestion, answers: [Swift.String]? = nil, userAnswer: Swift.String? = nil, image: UIKit.UIImage? = nil, completion: @escaping (LiveShopperSDK.LiveShopper.ApiResult<LiveShopperSDK.LSTaskResponse>) -> Swift.Void)
  @objc deinit
}
public class UserService {
  public func fetch() -> LiveShopperSDK.LSUser
  public func save()
  public func setDescription(description: Swift.String?)
  public func setDeviceId(id: Swift.String?)
  public func setLocation(location: CoreLocation.CLLocation)
  public func setMetadata(metadata: [Swift.AnyHashable : Any]?)
  public func setUserId(id: Swift.String?)
  @objc deinit
}
extension LiveShopperSDK.LSEventType : Swift.Hashable {}
extension LiveShopperSDK.LSEventType : Swift.RawRepresentable {}
extension LiveShopperSDK.LSTrackingPriority : Swift.Equatable {}
extension LiveShopperSDK.LSTrackingPriority : Swift.Hashable {}
extension LiveShopperSDK.LSTrackingPriority : Swift.RawRepresentable {}
extension LiveShopperSDK.LSEventVerification : Swift.Equatable {}
extension LiveShopperSDK.LSEventVerification : Swift.Hashable {}
extension LiveShopperSDK.LSEventVerification : Swift.RawRepresentable {}
extension LiveShopperSDK.ConsoleWriter.Method : Swift.Equatable {}
extension LiveShopperSDK.ConsoleWriter.Method : Swift.Hashable {}
extension LiveShopperSDK.LSEventConfidence : Swift.Equatable {}
extension LiveShopperSDK.LSEventConfidence : Swift.Hashable {}
extension LiveShopperSDK.LSEventConfidence : Swift.RawRepresentable {}
extension LiveShopperSDK.LSStatus : Swift.Equatable {}
extension LiveShopperSDK.LSStatus : Swift.Hashable {}
extension LiveShopperSDK.LSStatus : Swift.RawRepresentable {}
extension LiveShopperSDK.LSTrackingSync : Swift.Equatable {}
extension LiveShopperSDK.LSTrackingSync : Swift.Hashable {}
extension LiveShopperSDK.LSTrackingSync : Swift.RawRepresentable {}
extension LiveShopperSDK.LSInsightLocationType : Swift.Equatable {}
extension LiveShopperSDK.LSInsightLocationType : Swift.Hashable {}
extension LiveShopperSDK.LSInsightLocationType : Swift.RawRepresentable {}
extension LiveShopperSDK.LSTrackingOffline : Swift.Equatable {}
extension LiveShopperSDK.LSTrackingOffline : Swift.Hashable {}
extension LiveShopperSDK.LSTrackingOffline : Swift.RawRepresentable {}
extension LiveShopperSDK.LSInsightLocationConfidence : Swift.Equatable {}
extension LiveShopperSDK.LSInsightLocationConfidence : Swift.Hashable {}
extension LiveShopperSDK.LSInsightLocationConfidence : Swift.RawRepresentable {}
